using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Windows.Forms;
using ServiceAccounting.View.Base;
using ServiceAccounting.View.ViewEventArgs;

namespace ServiceAccounting.View
{
    public partial class CustomersView : UserControl, ICustomersView
    {
        public CustomersView()
        {
            InitializeComponent();

            OnViewLoaded(EventArgs.Empty);
            return;

            // This line of code is generated by Data Source Configuration Wizard
            // Instantiate a new DBContext
            var dbContext = new ApplicationContext();
            // Call the LoadAsync method to asynchronously get the data for the given DbSet from the database.

            // Call the LoadAsync method to asynchronously get the data for the given DbSet from the database.
            var bs = new BindingSource();
            //var data = _dbContext.Customers.Include(u=>u.Purchases).ThenInclude(p=>p.Product).ToList();
            //var t = data.GroupBy(u=>u.Name).Select(g=>new {g.Key,g.Sum()})

            //var result = _dbContext.Customers.GroupBy(p => p.Name).Select(u => new { u.Key, u.Sum(i => i.Products.fore) });
            //var result = _dbContext.Customers.Select(p => new { p.Name, p.Age, p.Products.Sum(u => u.Price) })
            //var users = from customer in _dbContext.Customers
            //            join purchase in _dbContext.Purchases on customer.Id equals purchase.CustomerId
            //            join product in _dbContext.Products on purchase.ProductId equals product.Id
            //            select new
            //            {
            //                name = customer.Name,
            //                age = customer.Age,
            //                sum = Sum(purchase.Count * product.Price)
            //            };

            //var result = from order in dbContext.Customers
            //             select order.Name;


            var result = from customer in dbContext.Customers
                         join order in dbContext.Orders on customer.Id equals order.CustomerId into customersOrders
                         from customerOrders in customersOrders.DefaultIfEmpty()
                         join orderItem in dbContext.OrderItems on customerOrders.Id equals orderItem.OrderId into orderItemsCustomers
                         from orderItemCustomer in orderItemsCustomers.DefaultIfEmpty()
                         join product in dbContext.Products on orderItemCustomer.ProductId equals product.Id into gs
                         from g in gs.DefaultIfEmpty()
                         group (g.Price * orderItemCustomer.Count) by new { customer.Name, customer.Age } into x
                         select new
                         {
                             x.Key.Name,
                             x.Key.Age,
                             TotalSum = x.Sum()
                         };

            //var query = from customer in dbContext.Customers
            //            join order in dbContext.Orders on customer.Id equals order.CustomerId into customersOrders
            //            from customerOrder in customersOrders.DefaultIfEmpty()
            //            join product in dbContext.Products on customerOrder. equals product.Id into ps
            //            from subProducts in ps.DefaultIfEmpty()
            //            group new { customer, customerOrder, subProducts } by new { customer.Name, customer.Age } into g
            //            select new
            //            {
            //                g.Key.Name,
            //                g.Key.Age,
            //                TotalPrice = g.Sum(x => x.subProducts.Price * x.subPurchases.Count)
            //            };
            bs.DataSource = result.ToList();
            gridControl1.DataSource = bs;

        }

        public event EventHandler ViewLoaded;
        public event EventHandler<BtnAddCustomerClickedEventArgs> btnAddCustomerClicked;

        public void UpdateView(IEnumerable<object> data)
        {
            var bindingSource = new BindingSource { DataSource = data };
            gridControl1.DataSource = bindingSource;
        }

        protected virtual void OnViewLoaded(EventArgs e)
        {
            ViewLoaded?.Invoke(this, e);
        }

        protected virtual void OnBtnAddCustomerClicked(BtnAddCustomerClickedEventArgs e)
        {
            btnAddCustomerClicked?.Invoke(this, e);
        }

        private void btnAddCustomer_Click(object sender, EventArgs e)
        {
            

            OnBtnAddCustomerClicked(new BtnAddCustomerClickedEventArgs { Name = textEdit1.Text, Age = Convert.ToInt32(textEdit2.Text) });

            return;

            using (var dbContext = new ApplicationContext())
            {
                var result = from customer in dbContext.Customers
                             join order in dbContext.Orders on customer.Id equals order.CustomerId into customersOrders
                             from customerOrders in customersOrders.DefaultIfEmpty()
                             join orderItem in dbContext.OrderItems on customerOrders.Id equals orderItem.OrderId into orderItemsCustomers
                             from orderItemCustomer in orderItemsCustomers.DefaultIfEmpty()
                             join product in dbContext.Products on orderItemCustomer.ProductId equals product.Id into gs
                             from g in gs.DefaultIfEmpty()
                             group (g.Price * orderItemCustomer.Count) by new { customer.Name, customer.Age } into x
                             select new
                             {
                                 x.Key.Name,
                                 x.Key.Age,
                                 TotalSum = x.Sum()
                             };


                //var result = (from customer in dbContext.Customers
                //             join order in dbContext.Orders.DefaultIfEmpty() on customer.Id equals order.CustomerId
                //             join orderItem in dbContext.OrderItems.DefaultIfEmpty() on order.Id equals orderItem.OrderId
                //             join product in dbContext.Products.DefaultIfEmpty() on orderItem.ProductId equals product.Id

                //             select new { customer.Name }).ToList();
                //group product.Price* orderItem.Count by customer.Name into g
                //            select new { Name = g.Key, TotalPrice = g.Sum() };

                var bs = new BindingSource();
                bs.DataSource = result.ToList();
                gridControl1.DataSource = bs;
            }
        }
    }
}
