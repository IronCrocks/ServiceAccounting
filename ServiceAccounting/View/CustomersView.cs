using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using Microsoft.EntityFrameworkCore;
using ServiceAccounting.Model;

namespace ServiceAccounting.View
{
    public partial class CustomersView : UserControl, ICustomersView
    {
        ApplicationContext _dbContext;

        public CustomersView()
        {
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard
            // Instantiate a new DBContext
            _dbContext = new ApplicationContext();
            // Call the LoadAsync method to asynchronously get the data for the given DbSet from the database.

            // Call the LoadAsync method to asynchronously get the data for the given DbSet from the database.
            var bs = new BindingSource();
            //var data = _dbContext.Customers.Include(u=>u.Purchases).ThenInclude(p=>p.Product).ToList();
            //var t = data.GroupBy(u=>u.Name).Select(g=>new {g.Key,g.Sum()})

            //var result = _dbContext.Customers.GroupBy(p => p.Name).Select(u => new { u.Key, u.Sum(i => i.Products.fore) });
            //var result = _dbContext.Customers.Select(p => new { p.Name, p.Age, p.Products.Sum(u => u.Price) })
            //var users = from customer in _dbContext.Customers
            //            join purchase in _dbContext.Purchases on customer.Id equals purchase.CustomerId
            //            join product in _dbContext.Products on purchase.ProductId equals product.Id
            //            select new
            //            {
            //                name = customer.Name,
            //                age = customer.Age,
            //                sum = Sum(purchase.Count * product.Price)
            //            };

            var query = from c in _dbContext.Customers
                        join p in _dbContext.Purchases on c.Id equals p.CustomerId into cs
                        from subPurchases in cs.DefaultIfEmpty()
                        join pr in _dbContext.Products on subPurchases.ProductId equals pr.Id into ps
                        from subProducts in ps.DefaultIfEmpty()
                        group new { c, subPurchases, subProducts } by new { c.Name, c.Age } into g
                        select new
                        {
                            g.Key.Name,
                            g.Key.Age,
                            TotalPrice = g.Sum(x => x.subProducts.Price * x.subPurchases.Count)
                        };

            bs.DataSource = query.ToList();
            gridControl1.DataSource = bs;

            OnLoad(EventArgs.Empty);
        }

        protected virtual void OnLoad(EventArgs e)
        {
            Load?.Invoke(sender, e);
        }

        private void gridView1_RowUpdated(object sender, DevExpress.XtraGrid.Views.Base.RowObjectEventArgs e)
        {
            _dbContext.SaveChanges();
        }

        private void gridView1_RowDeleted(object sender, DevExpress.Data.RowDeletedEventArgs e)
        {
            _dbContext.SaveChanges();
        }

        private void simpleButton1_Click(object sender, EventArgs e)
        {
            using (_dbContext)
            {
                _dbContext.Customers.Add(new Customer { Name = textEdit1.Text, Age = Convert.ToInt32(textEdit2.Text) });
                _dbContext.SaveChanges();
            }
        }
    }
}
