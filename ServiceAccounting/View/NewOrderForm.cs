using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows.Forms;
using Microsoft.EntityFrameworkCore;
using ServiceAccounting.View.Base;
using ServiceAccounting.View.ViewEventArgs;

namespace ServiceAccounting.View
{
    public partial class NewOrderForm : Form, INewOrderView
    {
        private List<Product> _products = new();

        public event EventHandler<BtnAddOrderClickedEventArgs> BtnAddOrderClicked;

        public NewOrderForm()
        {
            InitializeComponent();

            // This line of code is generated by Data Source Configuration Wizard
            // Instantiate a new DBContext
            ApplicationContext dbContext = new ApplicationContext();
            // Call the LoadAsync method to asynchronously get the data for the given DbSet from the database.
            dbContext.Products.LoadAsync().ContinueWith(loadTask =>
            {
                // Bind data to control when loading complete
                gridControl1.DataSource = dbContext.Products.Local.ToBindingList();
            }, System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext());
            // This line of code is generated by Data Source Configuration Wizard
            // Instantiate a new DBContext
            ApplicationContext dbContext1 = new ApplicationContext();
            // Call the LoadAsync method to asynchronously get the data for the given DbSet from the database.
            dbContext1.Customers.LoadAsync().ContinueWith(loadTask =>
            {
                // Bind data to control when loading complete
                gridLookUpEdit1.Properties.DataSource = dbContext1.Customers.Local.ToBindingList();
            }, System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext());

            gridControl2.DataSource = _products;
        }

        protected virtual void OnBtnAddOrderClicked(object sender, BtnAddOrderClickedEventArgs e)
        {
            BtnAddOrderClicked?.Invoke(this, e);
        }

        private void BtnAddOrderItem_Click(object sender, EventArgs e)
        {
            var selectedRow = gridView1.GetFocusedRow() as Product;

            _products.Add(selectedRow);
            gridControl2.BeginUpdate();
            gridControl2.EndUpdate();
        }

        private void BtnRemoveOrderItem_Click(object sender, EventArgs e)
        {
            var selectedRow = gridView2.GetFocusedRow() as Product;

            _products.Remove(selectedRow);
            gridControl2.BeginUpdate();
            gridControl2.EndUpdate();
        }

        private void BtnCancel_Click(object sender, EventArgs e)
        {
            Close();
        }

        private void BtnAddOrder_Click(object sender, EventArgs e)
        {
            var selectedProducts = GetProductRows();
            var selectedCustomer = GetSelectedCustomer();

            if (selectedCustomer is null) return;

            var order = CreateOrder();
            selectedCustomer.Orders.Add(order);

            foreach (var product in selectedProducts)
            {
                var selectedProduct = db.Products.FirstOrDefault(p => p.Id == product.Id);

                var orderItem = new OrderItem
                {
                    Count = 1,
                    Product = selectedProduct
                };

                order.OrderItems.Add(orderItem);
            }

            db.SaveChanges();

            Close();
        }

        private IEnumerable<Product> GetProductRows()
        {
            int rowIndex = 0;
            var selectedProducts = new List<Product>();

            while (gridView2.IsValidRowHandle(rowIndex))
            {
                selectedProducts.Add(gridView2.GetRow(rowIndex) as Product);
                rowIndex++;
            }

            return selectedProducts;
        }

        private Customer GetSelectedCustomer()
        {
            if (gridLookUpEdit1View.GetFocusedRow() is not Customer selectedCustomerRow) return null;

            using ApplicationContext db = new();
            return db.Customers.FirstOrDefault(p => p.Id == selectedCustomerRow.Id);
        }

        private Order CreateOrder() => new()
        {
            Number = "",
            Date = dateEdit1.DateTime,
        };
    }
}
